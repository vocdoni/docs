(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{423:function(e,t,a){"use strict";a.r(t);var i=a(24),n=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"how-it-works"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-it-works"}},[e._v("#")]),e._v(" How It Works")]),e._v(" "),a("h2",{attrs:{id:"components"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#components"}},[e._v("#")]),e._v(" Components")]),e._v(" "),a("h3",{attrs:{id:"gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gateway"}},[e._v("#")]),e._v(" Gateway")]),e._v(" "),a("p",[e._v("The Vocdoni-node gateway provides the public APIs that enable voters and third-parties to explore information about processes and entities, generate census proofs, and cast votes.")]),e._v(" "),a("h3",{attrs:{id:"manager-backend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#manager-backend"}},[e._v("#")]),e._v(" Manager Backend")]),e._v(" "),a("p",[e._v("The manager backend provides the private API for integrators and entities to manage their account and voting processes, respectively. The manager backend requires authentication keys to access private API methods.")]),e._v(" "),a("p",[e._v("The API backend is made of two components: a private database and a REST API.")]),e._v(" "),a("h4",{attrs:{id:"database"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#database"}},[e._v("#")]),e._v(" Database")]),e._v(" "),a("p",[e._v("The VaaS database holds information about integrators, organizations, elections, etc, in order to easily provide this information to the REST API.")]),e._v(" "),a("h5",{attrs:{id:"design"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#design"}},[e._v("#")]),e._v(" Design")]),e._v(" "),a("p",[e._v("A relational database is being used to store the necessary information. The following schema describes the involved relational entities:")]),e._v(" "),a("p",[e._v("The main entities are:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Integrator")]),e._v(": A third-party integrator of the VaaS API, including a billing plan and a set of organizations (customers of theirs)")]),e._v(" "),a("li",[a("code",[e._v("Organization")]),e._v(": An organization identified by its entityID")]),e._v(" "),a("li",[a("code",[e._v("Election")]),e._v(": A voting process belonging to a specific organization")]),e._v(" "),a("li",[a("code",[e._v("Census")]),e._v(": A census for a voting process, containing a number of census items")]),e._v(" "),a("li",[a("code",[e._v("CensusItem")]),e._v(": An item containing a public key corresponding to an eligible voter")]),e._v(" "),a("li",[a("code",[e._v("BillingPlan")]),e._v(": A configuration item specifying the maximum census size and process count available to a given integrator's account")])]),e._v(" "),a("h5",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" Implementation")]),e._v(" "),a("p",[e._v("The database is designed as a relational DB, and is implemented in Postgres. Nevertheless, the DB calls are abastracted by an the interface "),a("code",[e._v("database/database.go")]),e._v(", allowing for other implementations as well.")]),e._v(" "),a("p",[e._v("For the performing the with Postgres queries we use "),a("a",{attrs:{href:"github.com/jmoiron/sqlx"}},[e._v("jmoiron/sqlx")]),e._v(", which uses the "),a("a",{attrs:{href:"github.com/lib/pq"}},[e._v("lib/pq")]),e._v(" module for connection.")]),e._v(" "),a("p",[e._v("Database migrations ara handled with the "),a("a",{attrs:{href:"github.com/rubenv/sql-migrate"}},[e._v("rubenv/sql-migrate")]),e._v(" module.")]),e._v(" "),a("h4",{attrs:{id:"apis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apis"}},[e._v("#")]),e._v(" APIs")]),e._v(" "),a("h5",{attrs:{id:"api-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-service"}},[e._v("#")]),e._v(" API Service")]),e._v(" "),a("p",[e._v("The API service, called "),a("code",[e._v("UrlAPI")]),e._v(" in the codebase, contains the logic and components for the VaaS API.")]),e._v(" "),a("p",[e._v("The API service wraps:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("config")]),e._v(": Configuration options for the API")]),e._v(" "),a("li",[a("code",[e._v("router")]),e._v(": Manages the incoming requests")]),e._v(" "),a("li",[a("code",[e._v("api")]),e._v(": Contains the authentication middleware")]),e._v(" "),a("li",[a("code",[e._v("metrics agent")]),e._v(": Graphana and Prometheus metrics system")]),e._v(" "),a("li",[a("code",[e._v("db")]),e._v(": The VaaS database")]),e._v(" "),a("li",[a("code",[e._v("vocClient")]),e._v(": A client to make requests to the Vocdoni-Node gateways (communication with the Vochain)")]),e._v(" "),a("li",[a("code",[e._v("globalOrganizationKey")]),e._v(": An optional private key to encrypt organization keys in the db")]),e._v(" "),a("li",[a("code",[e._v("globalMetadataKey")]),e._v(": An optional private key to encrypt election metadata keys in the db")])]),e._v(" "),a("h6",{attrs:{id:"rest-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rest-api"}},[e._v("#")]),e._v(" REST API")]),e._v(" "),a("p",[e._v("The REST API includes the following endpoints:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Admin")]),e._v(" calls for administrators (Vocdoni) to manage the set of Integrators and billing plans")]),e._v(" "),a("li",[a("code",[e._v("Private")]),e._v(" calls for integrators to manage organizations & voting processes")]),e._v(" "),a("li",[a("code",[e._v("Public")]),e._v(" public calls for end-users to submit votes & query voting process information")]),e._v(" "),a("li",[a("code",[e._v("Quota")]),e._v(" [not yet implemented] rate-limited public calls for end-users to submit votes & query voting process information")])]),e._v(" "),a("p",[e._v("Available by default under "),a("code",[e._v("/api")]),e._v(".\nA detailed version of the API can be found "),a("RouterLink",{attrs:{to:"/urlapi/"}},[e._v("here")]),e._v(".")],1),e._v(" "),a("p",[e._v("The VaaS API also requires interaction with the "),a("a",{attrs:{href:"https://github.com/vocdoni/blind-csp",target:"_blank",rel:"noopener noreferrer"}},[e._v("Credential Service Provider"),a("OutboundLink")],1),e._v(" which provides an "),a("RouterLink",{attrs:{to:"/integration/census/off-chain-csp.html"}},[e._v("authentication API")]),e._v(" for voter authentication.")],1),e._v(" "),a("h3",{attrs:{id:"blind-signature-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blind-signature-api"}},[e._v("#")]),e._v(" Blind Signature API")]),e._v(" "),a("p",[e._v("This component provides access to a Credential Service Provider (CSP). Users can use this API to request and retrieve a blind signature for anonymous voting processes that use CSP. Details of CSP voting is found "),a("RouterLink",{attrs:{to:"/integration/census/off-chain-csp.html"}},[e._v("here")]),e._v(".")],1),e._v(" "),a("h2",{attrs:{id:"confidential-metadata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#confidential-metadata"}},[e._v("#")]),e._v(" Confidential Metadata")]),e._v(" "),a("p",[e._v("The VaaS-API also offers a new feature in the form of confidential election data. This means all human-readable information like the description and voting options is only available to election administrators and eligible voters.")]),e._v(" "),a("h3",{attrs:{id:"storage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storage"}},[e._v("#")]),e._v(" Storage")]),e._v(" "),a("p",[e._v("The confidential process metadata is still stored on "),a("RouterLink",{attrs:{to:"/deployment/gateway.html#file-api"}},[e._v("ipfs")]),e._v(", but it is first encrypted by the VaaS-API backend and uploaded in raw encrypted form. The encryption key is generated uniquely for each election stored in the database, salted with a separate private key specified in the server configuration.")],1),e._v(" "),a("h3",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),a("p",[e._v("There are two ways to get the data from confidential processes: the private (authenticated) endpoint and the public voter endpoint.")]),e._v(" "),a("p",[e._v("In the case of the "),a("RouterLink",{attrs:{to:"/integration/vaas-api.html#integrator-api-private"}},[e._v("private endpoint")]),e._v(", the presence of a valid integrator bearer API token signifies that the user is an admin who has rights to view confidential processes. The server fetches the key from the database, salts it with the configured global metadata key, and decrypts the confidential process metadata from ipfs, returning this metadata via the api call.")],1),e._v(" "),a("p",[e._v("In the case of the "),a("RouterLink",{attrs:{to:"/integration/vaas-api.html#public-api"}},[e._v("public endpoint")]),e._v(", instead of a single admin token, the user must request a shared key from the "),a("RouterLink",{attrs:{to:"/integration/vaas-api.html#authentication-api"}},[e._v("authentication endpoint")]),e._v(" and submit this to get confidential election details endpoint. The handler derives a salted public key from the shared key, which is a salted signature of the election ID. The handler then salts this public key with the election ID, producing the CSP public key. If this public key is the same as the election's "),a("code",[e._v("censusRoot")]),e._v(", meaning the voter has submitted a valid credential proof for that election, then the server fetches, decrypts, and uses the metadata key to provide the confidential metadata to the user.")],1)])}),[],!1,null,null,null);t.default=n.exports}}]);