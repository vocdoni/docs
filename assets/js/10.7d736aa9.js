(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{381:function(e,a,t){"use strict";t.r(a);var r=t(24),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"repository-and-branching-guidelines"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#repository-and-branching-guidelines"}},[e._v("#")]),e._v(" Repository and branching guidelines")]),e._v(" "),t("h2",{attrs:{id:"branches"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#branches"}},[e._v("#")]),e._v(" Branches")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("master")]),e._v(" all new developments are merged on this branch, it is the main branch")]),e._v(" "),t("li",[t("code",[e._v("stage")]),e._v(" pre-release branch environment")]),e._v(" "),t("li",[t("code",[e._v("release-*")]),e._v(" for each new release there will be a release branch based on master. "),t("strong",[e._v("The highest-number release-* branch is assumed to be active & deployed")])]),e._v(" "),t("li",[t("code",[e._v("feature/*")]),e._v(" development branch for a new feature (they are temporary and merged into master)")]),e._v(" "),t("li",[t("code",[e._v("hotfix/*")]),e._v(" branch for fixing release bugs")])]),e._v(" "),t("h2",{attrs:{id:"examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),t("h4",{attrs:{id:"new-development"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-development"}},[e._v("#")]),e._v(" New development")]),e._v(" "),t("ol",[t("li",[e._v("A new feature branch is created from master: "),t("code",[e._v("feature/add_datalayer_swarm")])]),e._v(" "),t("li",[e._v("If the development takes some time and master has new code, rebase it ("),t("code",[e._v("master")]),e._v("->"),t("code",[e._v("feature/add_datalayer_swarm")]),e._v(")")]),e._v(" "),t("li",[e._v("Once the feature is finished it will be merged to master via MR (depending on the relevance of the feature fast-forward or merge-commit will be used)")])]),e._v(" "),t("h4",{attrs:{id:"stage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stage"}},[e._v("#")]),e._v(" Stage")]),e._v(" "),t("p",[e._v("When a new release needs to be created, the first step is the stage (pre-release) phase.\nStage will be based on "),t("code",[e._v("master")]),e._v(" branch. Once testing and quality assurance has been completed, stage will be moved to "),t("code",[e._v("release-X.Y")])]),e._v(" "),t("h3",{attrs:{id:"release-creation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#release-creation"}},[e._v("#")]),e._v(" Release creation")]),e._v(" "),t("ol",[t("li",[e._v("A new release branch is created from stage, such as release-0.1")]),e._v(" "),t("li",[e._v("The release branch will receive changes which are only required by the specific release and hotfixes")]),e._v(" "),t("li",[e._v("Once the release is ready to be published, a new tag is created: v0.1.0")])]),e._v(" "),t("h3",{attrs:{id:"release-hotfix"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#release-hotfix"}},[e._v("#")]),e._v(" Release hotfix")]),e._v(" "),t("ol",[t("li",[e._v("If a relevant bug is found, a new hotfix branch is created, based on the last release: "),t("code",[e._v("hotfix/data_race_swarm")])]),e._v(" "),t("li",[e._v("Once the hotfix is done, it is merged to the release-0.1 branch. The hotfix might be cherry-picked from master")]),e._v(" "),t("li",[e._v("A new tag is created: v0.1.1")]),e._v(" "),t("li",[e._v("Meanwhile the master branch keeps being updated by its own")])]),e._v(" "),t("h2",{attrs:{id:"other-considerations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#other-considerations"}},[e._v("#")]),e._v(" Other considerations")]),e._v(" "),t("p",[e._v("Available branch name## Branches")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("master")]),e._v(" all new developments are merged on this branch, it is the main branch")]),e._v(" "),t("li",[t("code",[e._v("stage")]),e._v(" pre-release branch environment")]),e._v(" "),t("li",[t("code",[e._v("release-*")]),e._v(" for each new release there will be a release branch based on master")]),e._v(" "),t("li",[t("code",[e._v("feature/*")]),e._v(" development branch for a new feature (they are temporary and merged into master)")]),e._v(" "),t("li",[t("code",[e._v("hotfix/*")]),e._v(" branch for fixing release bugs")])]),e._v(" "),t("h2",{attrs:{id:"examples-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples-2"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),t("h4",{attrs:{id:"new-development-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-development-2"}},[e._v("#")]),e._v(" New development")]),e._v(" "),t("ol",[t("li",[e._v("A new feature branch is created from master: "),t("code",[e._v("feature/add_datalayer_swarm")])]),e._v(" "),t("li",[e._v("If the development takes some time and master has new code, rebase it ("),t("code",[e._v("master")]),e._v("->"),t("code",[e._v("feature/add_datalayer_swarm")]),e._v(")")]),e._v(" "),t("li",[e._v("Once the feature is finished it will be merged to master via MR (depending on the relevance of the feature fast-forward or merge-commit will be used)")])]),e._v(" "),t("h4",{attrs:{id:"stage-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stage-2"}},[e._v("#")]),e._v(" Stage")]),e._v(" "),t("p",[e._v("When a new release needs to be created, the first step is the stage (pre-release) phase.\nStage will be based on "),t("code",[e._v("master")]),e._v(" branch. Once testing and quality assurance has been completed, stage will be moved to "),t("code",[e._v("release-X.Y")])]),e._v(" "),t("h3",{attrs:{id:"release-creation-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#release-creation-2"}},[e._v("#")]),e._v(" Release creation")]),e._v(" "),t("ol",[t("li",[e._v("A new release branch is created from stage, such as release-0.1")]),e._v(" "),t("li",[e._v("The release branch will receive changes which are only required by the specific release and hotfixes")]),e._v(" "),t("li",[e._v("Once the release is ready to be published, a new tag is created: v0.1.0")])]),e._v(" "),t("h3",{attrs:{id:"release-hotfix-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#release-hotfix-2"}},[e._v("#")]),e._v(" Release hotfix")]),e._v(" "),t("ol",[t("li",[e._v("If a relevant bug is found, a new hotfix branch is created, based on the last release: "),t("code",[e._v("hotfix/data_race_swarm")])]),e._v(" "),t("li",[e._v("Once the hotfix is done, it is merged to the release-0.1 branch. The hotfix might be cherry-picked from master")]),e._v(" "),t("li",[e._v("A new tag is created: v0.1.1")]),e._v(" "),t("li",[e._v("Meanwhile the master branch keeps being updated by its own")])]),e._v(" "),t("h2",{attrs:{id:"other-considerations-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#other-considerations-2"}},[e._v("#")]),e._v(" Other considerations")]),e._v(" "),t("p",[e._v("Available branch names are: "),t("strong",[e._v("feature/<feature_name>")]),e._v(" "),t("strong",[e._v("bugfix/<bug_name>")]),e._v(" "),t("strong",[e._v("hotfix/<hotfix_name>")]),e._v(" "),t("strong",[e._v("refactor/<refactor_name>")])]),e._v(" "),t("p",[e._v("Make commits atomic. Usually 1 commit per modification (do not worry about creating multiple commits):")]),e._v(" "),t("ul",[t("li",[e._v("Wrong: 1)"),t("code",[e._v("add datalayer and other modifications")])]),e._v(" "),t("li",[e._v("Correct: 1)"),t("code",[e._v("add new datalayer swarm")]),e._v(" 2)"),t("code",[e._v("swarm datalayer API integration")]),e._v(" 3)"),t("code",[e._v("extend README with swarm datalayer information")]),e._v(" 4)"),t("code",[e._v("add comments to swarm datalayer")])])]),e._v(" "),t("p",[e._v("Use fast-forward for small merges such as 1 or 2 commits. Use merge-commit when merging features or bugfixes with several commits.")]),e._v(" "),t("p",[e._v("Exception: before merging if the commit history is messy or dirty, squash them and add a big commit listing all modifications.")]),e._v(" "),t("hr"),e._v(" "),t("p",[t("a",{attrs:{href:"https://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Similar model reference"),t("OutboundLink")],1)]),e._v(" "),t("h1",{attrs:{id:"git-snippets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-snippets"}},[e._v("#")]),e._v(" Git snippets")]),e._v(" "),t("h4",{attrs:{id:"make-modifications-on-a-merge-request"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#make-modifications-on-a-merge-request"}},[e._v("#")]),e._v(" Make modifications on a Merge Request")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git add <modified files>")])]),e._v(" "),t("li",[t("code",[e._v("git commit --amend")])]),e._v(" "),t("li",[t("code",[e._v("git push origin <branch_name> --force")])])]),e._v(" "),t("p",[e._v("Make commits atomic. Usually 1 commit per modification (do not worry about creating multiple commits):")]),e._v(" "),t("ul",[t("li",[e._v("Wrong: 1)"),t("code",[e._v("add datalayer and other modifications")])]),e._v(" "),t("li",[e._v("Correct: 1)"),t("code",[e._v("add new datalayer swarm")]),e._v(" 2)"),t("code",[e._v("swarm datalayer API integration")]),e._v(" 3)"),t("code",[e._v("extend README with swarm datalayer information")]),e._v(" 4)"),t("code",[e._v("add comments to swarm datalayer")])])]),e._v(" "),t("p",[e._v("Use fast-forward for small merges such as 1 or 2 commits. Use merge-commit when merging features or bugfixes with more than 2 commits.")]),e._v(" "),t("p",[e._v("Exception: before merging if the commit history is messy or dirty, squash them and add a big commit listing all modifications.")]),e._v(" "),t("hr"),e._v(" "),t("p",[t("a",{attrs:{href:"https://nvie.com/posts/a-successful-git-branching-model/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Similar model reference"),t("OutboundLink")],1)]),e._v(" "),t("h1",{attrs:{id:"git-snippets-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-snippets-2"}},[e._v("#")]),e._v(" Git snippets")]),e._v(" "),t("h4",{attrs:{id:"make-modifications-on-a-merge-request-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#make-modifications-on-a-merge-request-2"}},[e._v("#")]),e._v(" Make modifications on a Merge Request")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git add <modified files>")])]),e._v(" "),t("li",[t("code",[e._v("git commit --amend")])]),e._v(" "),t("li",[t("code",[e._v("git push origin <branch_name> --force")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);