(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{371:function(e,t,a){"use strict";a.r(t);var n=a(24),s=function(e){e.options.__data__block__={mermaid_64a5695c:"%%{init: {'theme':'forest'}}%%\n\nsequenceDiagram\n    participant Client\n    participant DV as DVote\n    participant ER as Entity Resolver<br/> contract\n    participant BN as BootNode\n\n\n    Client->>DV: Gateway.getActive(ethGateway,<br/> resolverAddress, entityId)\n        DV->>ER: EntityResolver.list(resolverAddress,<br/> entityId, \"vnd.vocdoni.boot\")\n        ER--\x3e>DV: bootNodeUrl[]\n    \n        DV->>BN: GET /gateways.json\n        BN--\x3e>DV: gatewayUri[]\n    DV--\x3e>Client: gatewayUri[]\n",mermaid_64a568e6:"%%{init: {'theme':'forest'}}%%\n\nsequenceDiagram\n    participant EM as Entity\n    participant DV as DVote\n    participant GW as Gateway/<br/>Web3\n    participant ER as Entity Resolver<br/> contract\n    participant IPFS\n\n    EM->>DV: getEntityId(entityAddress)\n    DV--\x3e>EM: entityId\n\n    EM->>DV: getDefaultResolver()\n    DV--\x3e>EM: resolverAddress\n\n    EM->>EM: Enter name, logo, header\n    \n    EM->>+DV: addFile(json)\n        DV->>GW: addFile(json)\n            GW->>IPFS: uri     \n            IPFS--\x3e>GW: \n        GW--\x3e>DV: \n    DV--\x3e>-EM: \n\n\n    EM->>+DV: setMetadata(entityId, uri)\n        DV->>GW: setText(entityId,<br/> \"vnd.vocdoni.boot\", uri)\n            GW->>ER: transaction;\n            ER--\x3e>GW: \n        GW--\x3e>DV: \n    DV--\x3e>-EM: \n",mermaid_64a5591e:"%%{init: {'theme':'forest'}}%%\nsequenceDiagram\n    participant PM as Entity\n    participant DV as DVote\n    participant GW as Gateway/<br/>Web3\n    participant CS as Census<br/>Service\n    participant IPFS as IPFS\n    participant BC as Blockchain\n\n    PM->>+DV: Process.create(<br/>processDetails)\n\n        DV->>+GW: censusDump(<br/>censusId, signature)\n            GW->>+CS: dump(censusId, signature)\n            CS--\x3e>-GW: merkleTree\n        GW--\x3e>-DV: merkleTree\n\n        DV--\x3e>GW: addFile(merkleTree)<br/> : merkleTreeHash\n            GW--\x3eIPFS: IPFS.put(merkleTree): merkleTreeHash\n        GW--\x3e>DV: \n\n        DV->>+GW: getCensusRoot(censusId)\n        GW->>+CS: getRoot(censusId)\n        CS--\x3e>-GW: rootHash\n        GW--\x3e>-DV: rootHash\n\n        DV--\x3e>GW: addFile(processMetadata)<br/> : metadataHash\n            GW--\x3eIPFS: IPFS.put(processMetadata) : metadataHash\n        GW--\x3e>DV: \n\n        DV->>+GW: Process.create(name,<br/> metadataContentUri, params)\n            GW->>+BC: transaction;\n            BC--\x3e>-GW: txId\n        GW--\x3e>-DV: txId\n\n        DV->>+GW: IPFS.put(newJsonMetadata)\n            GW--\x3eBC: IPFS.put(newJsonMetadata)\n        GW--\x3e>-DV: jsonHash\n\n        DV->>+GW: EntityResolver.set(<br/>entityId, 'vnd.vocdoni.meta',<br/> metadataContentUri)\n        GW--\x3e>-DV: txId\n\n    DV--\x3e>-PM: success\n",mermaid_64a55836:"%%{init: {'theme':'forest'}}%%\nsequenceDiagram\n    participant App as Client\n    participant DV as DVote\n    participant GW as Gateway/Web3\n    participant BC as Blockchain\n    participant IPFS as IPFS\n\n    App->>+DV: Process.fetchByEntity(<br/>entityAddress, resolver)\n\n        DV->>GW: EntityResolver.text(<br/>entityId, \"vnd.vocdoni.meta\")\n            GW->>BC: text(entityId, \"vnd.vocdoni.meta\")\n            BC--\x3e>GW: contentUri\n        GW--\x3e>DV: contentUri\n\n        DV->>GW: IPFS.get(jsonHash)\n            GW--\x3eIPFS: IPFS.get(jsonHash)\n        GW--\x3e>DV: entityMetadata\n\n        loop processIDs\n\n            DV->>GW: getMetadata(processId)\n                GW->>BC: getMetadata(processId)\n                BC--\x3e>GW: (metadata,<br/> merkleRoot, params)\n            GW--\x3e>DV: (metadata,<br/> merkleRoot, params)\n\n            alt Process is active or in the future\n                DV->>GW: fetchFile(<br/>metadataHash)\n                GW->>IPFS: IPFS.get(metadataHash)\n                IPFS--\x3e>GW: processMetadata\n                GW--\x3e>DV: processMetadata\n            end\n        end\n\n    DV--\x3e>-App: processesMetadata\n",mermaid_64a552d4:"%%{init: {'theme':'forest'}}%%\nsequenceDiagram\n    participant App as Client\n    participant DV as DVote\n    participant GW as Gateway/Web3\n    participant CS as Census Service\n\n    App->>+DV: Census.isInCensus(publicKey, censusId, censusMessagingURI)\n\n        DV->>+GW: genCensusProof(censusId, publicKey)\n        GW->>+CS: genProof(censusId, publicKey)\n        CS--\x3e>-GW: isInCensus\n        GW--\x3e>-DV: isInCensus\n\n    DV--\x3e>-App: isInCensus\n",mermaid_64a55216:"%%{init: {'theme':'forest'}}%%\nsequenceDiagram\n\n    participant App as Client\n    participant DV as DVote\n    participant GW as Gateway/Web3\n    participant CS as Census Service\n    participant MP as Mempool\n\n    App->>+DV: Process.castVote(vote, processMetadata, merkleProof?)\n\n        DV->>+GW: genProof(<br/>processMetadata.census.id,<br/> publicKey)\n\n            GW->>+CS: genProof(publicKeyHash)\n            CS--\x3e>-GW: merkleProof\n\n        GW--\x3e>-DV: merkleProof\n\n        DV->>DV: computeNullifier()\n\n        alt Encrypted process\n            DV->>DV: encrypt(vote,<br/> processMetadata.publicKey)\n        end\n\n        alt Anonymous vote\n            DV->>DV: generateZkProof(provingK,<br/> verificationK, signals)\n        end\n\n        alt Encrypted process\n            DV->>DV: encryptVotePackage(<br/>votePackage)\n        end\n\n        DV->>GW: submitVoteEnvelope(<br/>voteEnvelope)\n\n            GW->>MP: addEnvelope(voteEnvelope)\n            MP--\x3e>GW: ACK\n\n        GW--\x3e>DV: success\n\n    DV--\x3e>-App: success\n",mermaid_64a54392:"%%{init: {'theme':'forest'}}%%\nsequenceDiagram\n    participant App as Client\n    participant DV as DVote\n    participant GW as Gateway/Web3\n    participant VN as Vochain Node\n\n    App->>DV: getEnvelopeStatus(processId)\n\n        DV->>DV: computeNullifier()\n\n        DV->>+GW: getEnvelopeStatus(<br/>processId, nullifier)\n\n            GW--\x3e>VN: getEnvelopeStatus(<br/>processId, nullifier)\n            VN--\x3e>GW: status\n\n        GW--\x3e>-DV: status\n\n    DV--\x3e>App: registered\n",mermaid_64a54360:"%%{init: {'theme':'forest'}}%%\nsequenceDiagram\n    participant PM as Entity\n    participant DV as DVote\n    participant GW as Gateway/Web3\n    participant BC as Blockchain Process\n\n    PM->>DV: Process.endProcess(<br/>processId)\n\n        DV->>+GW: Process.setStatus(<br/>processId, \"ENDED\")\n            GW->>+BC: setStatus(<br/>processId, \"ENDED\")\n            BC--\x3e>-GW: success\n        GW--\x3e>-DV: success\n\n    DV--\x3e>PM: success\n",mermaid_64a54352:"%%{init: {'theme':'forest'}}%%\nsequenceDiagram\n    participant SC as Scrutinizer\n    participant DV as DVote\n    participant GW as Gateway/Web3\n    participant BC as Blockchain\n    participant IPFS as IPFS\n\n    SC->>+DV: Process.get(processId)\n\n        DV->>+GW: Process.get(processId)\n        GW->>+BC: Process.get(processId)\n        BC--\x3e>-GW: (name,<br/> metadataContentUri,<br/> privateKey)\n        GW--\x3e>-DV: (name,<br/> metadataContentUri,<br/> privateKey)\n\n    DV--\x3e>-SC: (name,<br/> metadataContentUri)\n\n    SC->>+DV: IPFS.get(metadataHash)\n\n        DV->>+GW: fetchFile(<br/>metadataHash)\n        GW->>+IPFS: IPFS.get(metadataHash)\n        IPFS--\x3e>-GW: processMetadata\n        GW--\x3e>-DV: processMetadata\n\n    DV--\x3e>-SC: processMetadata\n\n    SC->>+DV: getEnvelopeNullifiers(<br/>processId)\n        loop\n            DV->>+GW: Process.getEnvelopeList(<br/>processId)\n                GW->>+BC: Process.getEnvelopeList(<br/>processId)\n                BC--\x3e>-GW: nullifiers[]\n            GW--\x3e>-DV: nullifiers[]\n        end\n    DV--\x3e>-SC: nullifiers[]\n\n    SC->>+DV: getEnvelopes(nullifiers[])\n        loop\n            DV->>+GW: Process.getEnvelope(<br/>nullifier)\n                GW->>+BC: Process.getEnvelope(<br/>nullifier)\n                BC--\x3e>-GW: envelope\n            GW--\x3e>-DV: envelope\n        end\n    DV--\x3e>-SC: envelopes[]\n\n\n    SC->>SC: sort(merge(<br/>filterValid(envelopes)))\n    SC->>SC: resolveDuplicates(<br/>validEnvelopes)\n\n    loop uniqueVotePackages\n\n        SC->>+DV: Proof.check(proof, nullifier, ...)\n        DV--\x3e>-SC: valid\n\n    end\n\n    loop validVotes\n\n        alt encrypted process\n            SC->>+DV: decrypt(vote.encryptedVote, privateKey)\n            DV--\x3e>-SC: voteValue\n        end\n\n        SC->>SC: updateVoteCount(<br/>voteValue)\n    end\n"}},r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"component-interaction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#component-interaction"}},[e._v("#")]),e._v(" Component Interaction")]),e._v(" "),a("p",[e._v("Traditional systems like APIs present simple scenarios, in which a centralized service define how data should be encoded. However, decentralized ecosystems like a distributed voting system need much stronger work on defining every interaction between any two peers on the network.")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#component-interaction"}},[e._v("Component Interaction")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#prior-to-voting"}},[e._v("Prior to voting")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#overview"}},[e._v("Overview")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#initial-gateway-discovery"}},[e._v("Initial Gateway discovery")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#set-entity-metadata"}},[e._v("Set Entity metadata")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#voting"}},[e._v("Voting")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#overview-1"}},[e._v("Overview")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#voting-process-creation"}},[e._v("Voting process creation")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#voting-process-retrieval"}},[e._v("Voting process retrieval")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#check-census-inclusion"}},[e._v("Check census inclusion")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#casting-a-vote"}},[e._v("Casting a vote")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#after-voting"}},[e._v("After voting")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#overview-2"}},[e._v("Overview")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#checking-a-vote-envelope"}},[e._v("Checking a Vote Envelope")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#closing-a-voting-process"}},[e._v("Closing a Voting Process")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#vote-scrutiny"}},[e._v("Vote Scrutiny")])])])])])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"prior-to-voting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prior-to-voting"}},[e._v("#")]),e._v(" Prior to voting")]),e._v(" "),a("h3",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[e._v("Before a voting process can take place, the following four general steps must occur:")]),e._v(" "),a("ol",[a("li",[e._v("Vocdoni deploys the "),a("a",{attrs:{href:"https://github.com/vocdoni/dvote-solidity#contracts",target:"_blank",rel:"noopener noreferrer"}},[e._v("smart contracts"),a("OutboundLink")],1),e._v(" to Ethereum")]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("organizer")]),e._v(" registers an "),a("a",{attrs:{href:"/architecture/smart-contracts/entity-resolver"}},[e._v("Entity")]),e._v(" to the blockchain\n"),a("ul",[a("li",[e._v("The metadata of the entity is pinned on IPFS")]),e._v(" "),a("li",[e._v("The reference is declared on the ENS resolver of the entity")])])]),e._v(" "),a("li",[e._v("A public key is registered  for each user\n"),a("ul",[a("li",[a("em",[e._v("Either")]),e._v(":\n"),a("ul",[a("li",[e._v("The "),a("strong",[e._v("voter")]),e._v(" creates a self-sovereign identity and registers to an organization with their public key")]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("organizer")]),e._v(" keeps a list of registered public keys of eligible voters")])])]),e._v(" "),a("li",[a("em",[e._v("Or")]),e._v(":\n"),a("ul",[a("li",[e._v("The "),a("strong",[e._v("organizer")]),e._v(" creates a spreadsheet containing private information of each eligible voter. Each voter's public key for a specific voting process is derived from their private information.")])])])])]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("organizer")]),e._v(" published a census Merkle Tree containing all voters' public keys")])]),e._v(" "),a("h3",{attrs:{id:"initial-gateway-discovery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initial-gateway-discovery"}},[e._v("#")]),e._v(" Initial Gateway discovery")]),e._v(" "),a("p",[e._v("The client wants to get initial connectivity with the available gateways.")]),e._v(" "),a("ol",[a("li",[e._v("Using a well-known Ethereum Gateway, we query for an initial boot node on the ENS Resolver. The following is defined:\n"),a("ul",[a("li",[e._v("Well-known Ethereum blockchain gateways")]),e._v(" "),a("li",[e._v("Entity Resolver contract address")]),e._v(" "),a("li",[e._v("Vocdoni's Entity ID")])])]),e._v(" "),a("li",[e._v("From one of the boot nodes, we get a list of Gateways provided by Vocdoni")])]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a5695c",graph:e.$dataBlock.mermaid_64a5695c}}),a("p",[e._v("Eventually:")]),e._v(" "),a("ul",[a("li",[e._v("One of Vocdoni's Gateways is used to query the ENS resolver of a certain Entity")])]),e._v(" "),a("h3",{attrs:{id:"set-entity-metadata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-entity-metadata"}},[e._v("#")]),e._v(" Set Entity metadata")]),e._v(" "),a("p",[e._v("An Entity starts existing at the moment it has certain metadata stored on the "),a("RouterLink",{attrs:{to:"/architecture/smart-contracts/entity-resolver.html#entityresolver"}},[e._v("Entity Resolver")]),e._v(" smart contract.")],1),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a568e6",graph:e.$dataBlock.mermaid_64a568e6}}),a("p",[a("strong",[e._v("Used schemas:")])]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/architecture/data-schemes/entity-metadata"}},[e._v("Entity metadata")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"voting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#voting"}},[e._v("#")]),e._v(" Voting")]),e._v(" "),a("h3",{attrs:{id:"overview-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview-2"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[e._v("The voting process as a whole is as follows:")]),e._v(" "),a("ol",[a("li",[e._v("The "),a("strong",[e._v("organizer")]),e._v(" creates a voting process\n"),a("ul",[a("li",[e._v("Select the voter census or voter csv to use")]),e._v(" "),a("li",[e._v("Get the census Merkle Root")]),e._v(" "),a("li",[e._v("Pin the Merkle Tree on IPFS or similar")]),e._v(" "),a("li",[e._v("Pin the "),a("a",{attrs:{href:"/architecture/data-schemes/process"}},[e._v("Process Metadata")]),e._v(" on IPFS")]),e._v(" "),a("li",[e._v("Send a transaction to the process smart contract, including "),a("RouterLink",{attrs:{to:"/architecture/protocol/data-origins.html#content-uri"}},[e._v("Content URI")]),e._v("s pointing to the "),a("a",{attrs:{href:"/architecture/data-schemes/process"}},[e._v("Process Metadata")]),e._v(" and the "),a("RouterLink",{attrs:{to:"/architecture/census/census-overview.html"}},[e._v("Census Merkle Tree")]),e._v(", along with the rest of parameters")],1),e._v(" "),a("li",[e._v("Update the list of voting processes on the "),a("RouterLink",{attrs:{to:"/architecture/smart-contracts/entity-resolver.html#entity-resolver"}},[e._v("ENS Resolver")]),e._v(" contract for the entity")],1)])]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("voter")]),e._v(" fetches the active processes for an "),a("strong",[e._v("Entity")]),e._v(", or is sent a link directly to a process\n"),a("ul",[a("li",[e._v("Read the description and review the voting options")])])]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("voter")]),e._v(" verifies that they belong in the census:\n"),a("ul",[a("li",[a("em",[e._v("Either")]),e._v(":\n"),a("ul",[a("li",[e._v("Decrypt their self-managed key and check its inclusion in the census")])])]),e._v(" "),a("li",[a("em",[e._v("Or")]),e._v(":\n"),a("ul",[a("li",[e._v("Enter their private information to the client, which generates their ephemeral key pair for this process, and check that key's inclusion in the census")])])])])]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("voter")]),e._v(" casts a vote\n"),a("ul",[a("li",[e._v("The client generates a proof that the voter's key belongs in the census Merkle Tree")]),e._v(" "),a("li",[e._v("The client computes the user's nullifier for the vote")]),e._v(" "),a("li",[e._v("The client generates the "),a("RouterLink",{attrs:{to:"/architecture/smart-contracts/process.html#vote-package-zk-snarks"}},[e._v("Vote Package")]),e._v(" with the election choices")],1),e._v(" "),a("li",[a("em",[e._v("If the process is encrypted")]),e._v(":\n"),a("ul",[a("li",[e._v("The client fetches the encryption public keys from the "),a("strong",[e._v("Gateway")])]),e._v(" "),a("li",[e._v("The client encrypts the "),a("RouterLink",{attrs:{to:"/architecture/smart-contracts/process.html#vote-package-zk-snarks"}},[e._v("Vote Package")]),e._v(" with the public keys of the voting process")],1)])]),e._v(" "),a("li",[a("em",[e._v("If the process is anonymous")]),e._v(":\n"),a("ul",[a("li",[e._v("The client fetches the proving and verification keys and then generates the "),a("strong",[e._v("Zero-Knowledge Proof")])]),e._v(" "),a("li",[e._v("The ZK Proof proves that:\n"),a("ul",[a("li",[e._v("The voter knows a private key, whose public key belongs to the census")]),e._v(" "),a("li",[e._v("The provided nullifier matches the current process ID and the user's private key\n")])])])])]),e._v(" "),a("li",[e._v("The client generates the "),a("RouterLink",{attrs:{to:"/architecture/data-schemes/process.html#vote-envelope-zk-snarks"}},[e._v("Vote Envelope")]),e._v(" containing the Vote Package")],1),e._v(" "),a("li",[e._v("The client selects a "),a("strong",[e._v("Gateway")]),e._v(" among the available ones and submits the "),a("RouterLink",{attrs:{to:"/architecture/data-schemes/process.html#vote-envelope-zk-snarks"}},[e._v("Vote Envelope")])],1),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("Gateway")]),e._v(" submits the "),a("RouterLink",{attrs:{to:"/architecture/data-schemes/process.html#vote-envelope-zk-snarks"}},[e._v("Vote Envelope")]),e._v(" to the mempool of the Vochain")],1)])]),e._v(" "),a("li",[e._v("A "),a("strong",[e._v("Vochain miner")]),e._v(" processes an incoming "),a("RouterLink",{attrs:{to:"/architecture/data-schemes/process.html#vote-envelope"}},[e._v("Vote Envelope")]),e._v(" "),a("ul",[a("li",[e._v("The "),a("strong",[e._v("Vochain miner")]),e._v(" checks that the current block is within the process start/end blocks")]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("Vochain miner")]),e._v(" checks that the given nullifier has not been used before")]),e._v(" "),a("li",[a("em",[e._v("If the process is anonymous")]),e._v(":\n"),a("ul",[a("li",[e._v("The "),a("strong",[e._v("Vochain miner")]),e._v(" checks that the "),a("strong",[e._v("ZK Proof")]),e._v(" of the "),a("RouterLink",{attrs:{to:"/architecture/data-schemes/process.html#vote-envelope"}},[e._v("Vote Envelope")]),e._v(" is valid")],1)])]),e._v(" "),a("li",[a("em",[e._v("If the process is not anonymous")]),e._v(":\n"),a("ul",[a("li",[e._v("The "),a("strong",[e._v("Vochain miner")]),e._v(" checks that the "),a("strong",[e._v("Merkle Proof")]),e._v(" of the "),a("RouterLink",{attrs:{to:"/architecture/data-schemes/process.html#vote-envelope"}},[e._v("Vote Envelope")]),e._v(" matches the vote signature and the Merkle root")],1)])]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("Vochain miner")]),e._v(" adds the "),a("RouterLink",{attrs:{to:"/architecture/data-schemes/process.html#vote-envelope"}},[e._v("Vote Envelope")]),e._v(" to the next block")],1)])],1)]),e._v(" "),a("h3",{attrs:{id:"voting-process-creation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#voting-process-creation"}},[e._v("#")]),e._v(" Voting process creation")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a5591e",graph:e.$dataBlock.mermaid_64a5591e}}),a("p",[a("strong",[e._v("Used schemas:")])]),e._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/architecture/data-schemes/process.html#process-metadata"}},[e._v("Process Metadata")])],1),e._v(" "),a("li",[a("RouterLink",{attrs:{to:"/architecture/services/census-service.html#addclaimbulk"}},[e._v("Census Service addClaimBulk")])],1),e._v(" "),a("li",[a("RouterLink",{attrs:{to:"/architecture/services/census-service.html#getroot"}},[e._v("Census Service getRoot")])],1),e._v(" "),a("li",[a("RouterLink",{attrs:{to:"/architecture/services/census-service.html#dump"}},[e._v("Census Service dump")])],1)]),e._v(" "),a("h3",{attrs:{id:"voting-process-retrieval"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#voting-process-retrieval"}},[e._v("#")]),e._v(" Voting process retrieval")]),e._v(" "),a("p",[e._v("A user wants to retrieve the voting processes of a given Entity")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a55836",graph:e.$dataBlock.mermaid_64a55836}}),a("p",[a("strong",[e._v("Used schemas:")])]),e._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/architecture/data-schemes/process.html#process-metadata"}},[e._v("Process Metadata")])],1)]),e._v(" "),a("h3",{attrs:{id:"check-census-inclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-census-inclusion"}},[e._v("#")]),e._v(" Check census inclusion")]),e._v(" "),a("p",[e._v("A user wants to know whether he/she belongs in the census of a process or not.")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a552d4",graph:e.$dataBlock.mermaid_64a552d4}}),a("p",[a("strong",[e._v("Used schemas:")])]),e._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/architecture/services/census-service.html#generateproof"}},[e._v("Census Service generateProof")])],1)]),e._v(" "),a("p",[a("strong",[e._v("Notes:")])]),e._v(" "),a("ul",[a("li",[a("code",[e._v("generateProof")]),e._v(" may be replaced with a call to "),a("code",[e._v("hasClaim")]),e._v(", for efficiency")]),e._v(" "),a("li",[e._v("The "),a("code",[e._v("censusId")]),e._v(" and "),a("code",[e._v("censusMessagingURI")]),e._v(" should have been fetched from the "),a("a",{attrs:{href:"/architecture/smart-contracts/process"}},[e._v("Process Metadata")])])]),e._v(" "),a("h3",{attrs:{id:"casting-a-vote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#casting-a-vote"}},[e._v("#")]),e._v(" Casting a vote")]),e._v(" "),a("p",[e._v("A user wants to submit a vote for a given governance process.")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a55216",graph:e.$dataBlock.mermaid_64a55216}}),a("p",[a("strong",[e._v("Used schemas:")])]),e._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/architecture/data-schemes/process.html#process-metadata"}},[e._v("Process Metadata")])],1),e._v(" "),a("li",[a("RouterLink",{attrs:{to:"/architecture/services/census-service.html#generateproof"}},[e._v("Census Service generateProof")])],1),e._v(" "),a("li",[a("RouterLink",{attrs:{to:"/architecture/smart-contracts/process.html#vote-package"}},[e._v("Vote Package")])],1)]),e._v(" "),a("p",[a("strong",[e._v("Notes:")])]),e._v(" "),a("ul",[a("li",[e._v("The Merkle Proof could be retrieved and stored beforehand")])]),e._v(" "),a("h2",{attrs:{id:"after-voting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#after-voting"}},[e._v("#")]),e._v(" After voting")]),e._v(" "),a("h3",{attrs:{id:"overview-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview-3"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("ul",[a("li",[e._v("The "),a("strong",[e._v("voter")]),e._v(" checks that their vote is registered\n"),a("ul",[a("li",[e._v("The client asks a "),a("strong",[e._v("Gateway")]),e._v(" for the envelope status of his/her nullifier")])])]),e._v(" "),a("li",[e._v("The process ends\n"),a("ul",[a("li",[a("em",[e._v("Either the "),a("strong",[e._v("organizer")]),e._v(" ends the process")]),e._v(":\n"),a("ul",[a("li",[e._v("The "),a("strong",[e._v("organizer")]),e._v(" sends a transaction to the process contract and sets the state of the process as ended")]),e._v(" "),a("li",[e._v("An oracle relays the transaction to the Vochain")])])]),e._v(" "),a("li",[a("em",[e._v("Or the process end block is reached")]),e._v(":\n"),a("ul",[a("li",[e._v("An oracle sends a transaction to the Vochain to signal that a process has ended")])])]),e._v(" "),a("li",[e._v("Further envelope submissions are rejected")]),e._v(" "),a("li",[a("em",[e._v("On encrypted processes")]),e._v(":\n"),a("ul",[a("li",[e._v("Miners create a transaction revealing their private key for the process")])])])])]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("indexer")]),e._v(" computes the results, as well as any third-party "),a("strong",[e._v("observer")]),e._v(" who wishes to do so\n"),a("ul",[a("li",[e._v("The "),a("strong",[e._v("indexer")]),e._v(" fetches the "),a("a",{attrs:{href:"/architecture/data-schemes/process"}},[e._v("Process Metadata")]),e._v(" from the process contract and IPFS")]),e._v(" "),a("li",[a("em",[e._v("On encrypted processes")]),e._v(":\n"),a("ul",[a("li",[e._v("The "),a("strong",[e._v("indexer")]),e._v(" requests the encryption private keys from the "),a("strong",[e._v("Gateway")])])])]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("indexer")]),e._v(" fetches all the "),a("RouterLink",{attrs:{to:"/architecture/data-schemes/process.html#vote-envelope"}},[e._v("Vote Envelopes")]),e._v(" registered for the process")],1),e._v(" "),a("li",[a("em",[e._v("On encrypted processes")]),e._v(":\n"),a("ul",[a("li",[e._v("The "),a("strong",[e._v("indexer")]),e._v(" decrypts each "),a("RouterLink",{attrs:{to:"/architecture/smart-contracts/process.html#vote-package-zk-snarks"}},[e._v("Vote Package")])],1)])]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("indexer")]),e._v(" checks their ZK Proofs or Merkle Proofs, the "),a("RouterLink",{attrs:{to:"/architecture/smart-contracts/process.html#vote-package-zk-snarks"}},[e._v("Vote Package")]),e._v(" contents and the restrictions imposed by the process flags")],1),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("indexer")]),e._v(" counts the number of appearances of every single vote value\n"),a("ul",[a("li",[e._v("Any vote value beyond the ones defined in the "),a("a",{attrs:{href:"/architecture/data-schemes/process"}},[e._v("Process Metadata")]),e._v(" is discarded\n\x3c!-- - The "),a("strong",[e._v("indexer")]),e._v(" and any third-party "),a("strong",[e._v("observers")]),e._v(" publish the vote results")])])]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("indexer")]),e._v(" computes a ZK Rollup, proving that the given results have been correctly computed from valid vote envelopes and that the results include the choices of "),a("code",[e._v("N")]),e._v(" valid voter")]),e._v(" "),a("li",[e._v("The "),a("strong",[e._v("observer")]),e._v(" submits a transaction to the process smart contract, including the results and the ZK Rollup proof of the computation results --\x3e")])])])]),e._v(" "),a("h3",{attrs:{id:"checking-a-vote-envelope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#checking-a-vote-envelope"}},[e._v("#")]),e._v(" Checking a Vote Envelope")]),e._v(" "),a("p",[e._v("A user wants to check the status of an envelope by its nullifier.")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a54392",graph:e.$dataBlock.mermaid_64a54392}}),a("h3",{attrs:{id:"closing-a-voting-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#closing-a-voting-process"}},[e._v("#")]),e._v(" Closing a Voting Process")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a54360",graph:e.$dataBlock.mermaid_64a54360}}),a("h3",{attrs:{id:"vote-scrutiny"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vote-scrutiny"}},[e._v("#")]),e._v(" Vote Scrutiny")]),e._v(" "),a("p",[e._v("Anyone with network access can compute the scrutiny of a given processId.\n")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a54352",graph:e.$dataBlock.mermaid_64a54352}}),a("p",[a("strong",[e._v("Used schemas:")])]),e._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/architecture/data-schemes/process.html#process-metadata"}},[e._v("Process Metadata")])],1),e._v(" "),a("li",[a("RouterLink",{attrs:{to:"/architecture/smart-contracts/process.html#vote-package"}},[e._v("Vote Package")])],1)])],1)}),[],!1,null,null,null);"function"==typeof s&&s(r);t.default=r.exports}}]);