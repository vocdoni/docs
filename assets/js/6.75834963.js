(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{363:function(e,t,i){e.exports=i.p+"assets/img/testing-layers.9b8314a0.png"},378:function(e,t,i){"use strict";i.r(t);var o=i(24),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"development-guidelines"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#development-guidelines"}},[e._v("#")]),e._v(" Development guidelines")]),e._v(" "),o("blockquote",[o("p",[e._v("ðŸ’¡ "),o("em",[e._v("There is a 'development guidelines' doc being worked together with Aragon, this\ncurrent page is what we are using while the shared doc with Aragon gets done.")])])]),e._v(" "),o("h2",{attrs:{id:"intro"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#intro"}},[e._v("#")]),e._v(" Intro")]),e._v(" "),o("ul",[o("li",[e._v("The 'motto' is: "),o("strong",[e._v("keep it simple")]),e._v(" "),o("ul",[o("li",[e._v("If we over-extend the explanations or the 'rules', these guidelines will be harder to read and therefore harder to follow.")]),e._v(" "),o("li",[e._v("Development guidelines can easily fall into the trap of being very opinionated and subjective. To avoid this, we aim to specify a "),o("em",[e._v("'minimum common base layer'")]),e._v(" for our development. If a specific team wants to add some extra concrete steps particular to their area of expertise, they are free to do so.")])])])]),e._v(" "),o("h2",{attrs:{id:"tasks-management"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tasks-management"}},[e._v("#")]),e._v(" Tasks management")]),e._v(" "),o("ul",[o("li",[e._v("Description of current status:\n"),o("ul",[o("li",[e._v("Currently:\n"),o("ul",[o("li",[e._v("Product teams are currently using Jira")]),e._v(" "),o("li",[e._v("The Protocol team is still using Linear")])])]),e._v(" "),o("li",[e._v("Concrete tasks are defined in "),o("code",[e._v("Github issues")])]),e._v(" "),o("li",[e._v("General tasks are defined in\n"),o("ul",[o("li",[o("code",[e._v("Linear")]),e._v(": "),o("em",[e._v("Will be replaced by Jira eventually")])]),e._v(" "),o("li",[o("code",[e._v("Jira")])]),e._v(" "),o("li",[o("code",[e._v("Notion")]),e._v(": "),o("em",[e._v("document: 'Monday commitments' (priorities of the week & forecast for month)")])])])])])])]),e._v(" "),o("h2",{attrs:{id:"docs-specs-strategy"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docs-specs-strategy"}},[e._v("#")]),e._v(" Docs/Specs strategy")]),e._v(" "),o("ul",[o("li",[e._v("Code should be well documented (following the specific language guidelines)")]),e._v(" "),o("li",[e._v("New features should be documented before being implemented\n"),o("ul",[o("li",[e._v("Reasons:\n"),o("ul",[o("li",[e._v("Avoid inefficiencies due incompatibilities on the client & server sides")]),e._v(" "),o("li",[e._v("Make it easier for the reviewer to verify that the implementation follows the spec")])])]),e._v(" "),o("li",[o("strong",[e._v("Product features")]),e._v(" need to be well described before being implemented.\n"),o("ul",[o("li",[e._v("A description of "),o("strong",[e._v("why")]),e._v(" this change is being made, is expected.")]),e._v(" "),o("li",[e._v('A clear "definition of done" is expected.')])])]),e._v(" "),o("li",[o("strong",[e._v("Protocol changes")]),e._v(" need to be documented on a docs PR, following suit of a discussion\n"),o("ul",[o("li",[e._v("Use the discussions on the "),o("code",[e._v("protocol")]),e._v(" repo when the topic is relevant to the community")]),e._v(" "),o("li",[e._v("Use a Notion page or a HackMD if the topic is relevant to the team only")])])])])])]),e._v(" "),o("p",[o("a",{attrs:{href:"https://discuss.vocdoni.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("discuss.vocdoni.io"),o("OutboundLink")],1),e._v(" is used for discussing new features and protocol proposals.")]),e._v(" "),o("h3",{attrs:{id:"layers-of-documentation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#layers-of-documentation"}},[e._v("#")]),e._v(" Layers of documentation")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("Tasks related to PR discussions")]),e._v(": discuss the problem, possible solutions, ideas, agreements, related issues")]),e._v(" "),o("li",[o("strong",[e._v("Commit message")]),e._v(": describe what the commit adds & why")]),e._v(" "),o("li",[o("strong",[e._v("Inline code documentation")]),e._v(": describe the method & logic of the code, to help the future reader of the code")]),e._v(" "),o("li",[o("strong",[e._v("Package README.md")]),e._v(": if needed, add global description of the package")]),e._v(" "),o("li",[o("strong",[e._v("docs.vocdoni.io")]),e._v(": document the spec & architecture. If a new protocol/feature is being added, should appear here before the implementation starts.")])]),e._v(" "),o("h2",{attrs:{id:"testing-strategy"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#testing-strategy"}},[e._v("#")]),e._v(" Testing strategy")]),e._v(" "),o("p",[o("img",{attrs:{src:i(363),alt:""}})]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("Unit")]),e._v(": test the unit in full isolation from any other code part. Usually within a unique package.")]),e._v(" "),o("li",[o("strong",[e._v("Integration")]),e._v(": where individual units and components are combined and tested as a group with a clear scope. Usually using multiple packages.\n"),o("ul",[o("li",[e._v("example:\n"),o("ul",[o("li",[e._v("https://github.com/vocdoni/vocdoni-node/tree/master/test")])])])])]),e._v(" "),o("li",[o("strong",[e._v("End-to-end")]),e._v(": uses a service that is not in the repo, and performs the full flow. Can test the user behavior.\n"),o("ul",[o("li",[e._v("examples:\n"),o("ul",[o("li",[e._v("The docker-compose test suite on vocdoni-node: https://github.com/vocdoni/vocdoni-node/tree/master/dockerfiles/testsuite")])])])])])]),e._v(" "),o("p",[e._v("Priority of test layers:")]),e._v(" "),o("ol",[o("li",[e._v("Add "),o("strong",[e._v("unit tests")]),e._v(" of the feature being added")]),e._v(" "),o("li",[e._v("When a group of features enables a new flow, add "),o("strong",[e._v("integration test")]),e._v(" for that flow (which combines the features)")]),e._v(" "),o("li",[e._v("If possible, implement the same flow from the integration test into an "),o("strong",[e._v("end-to-end test")])])]),e._v(" "),o("p",[e._v("When fixing a "),o("strong",[e._v("bug")]),e._v(":")]),e._v(" "),o("ol",[o("li",[e._v("Add the tests that make the bug appear")]),e._v(" "),o("li",[e._v("Then fix the bug")]),e._v(" "),o("li",[e._v("Execute the test and check that the bug no longer lives\nThe idea is to be able prove with code that the bug is fixed: to create a test that fails, and after the code fix the test passes.")])]),e._v(" "),o("h3",{attrs:{id:"code-reviews"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#code-reviews"}},[e._v("#")]),e._v(" Code reviews")]),e._v(" "),o("ul",[o("li",[e._v("It is responsability of the PR creator & PR reviewers to ensure that the "),o("em",[e._v("Testing strategy")]),e._v(" is followed. No PR should be merged if there are missing tests of the newly added code.")]),e._v(" "),o("li",[e._v("Each repository has a list of people with enough knowledge about it to review PRs.\n"),o("ul",[o("li",[e._v("TODO: Define code 'owner'/'default reviewer' concept")]),e._v(" "),o("li",[e._v("TODO: Agree on who is knowledgable of each repository package, and write it down --\x3e 'code owner' (enforced by Github)")])])]),e._v(" "),o("li",[e._v("When creating a PR the PR creator needs to "),o("code",[e._v("require")]),e._v(" at least 1 PR reviewer\n"),o("ul",[o("li",[e._v("Take in mind that the PR reviewer may be receiving lots of emails of notifications of Github, so the PR creator should decide if it's needed to send a private message to that person to notify of the PR")])])])]),e._v(" "),o("h4",{attrs:{id:"reviewing-a-pr"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#reviewing-a-pr"}},[e._v("#")]),e._v(" Reviewing a PR")]),e._v(" "),o("ul",[o("li",[e._v("When reviewing others' code, try to:\n"),o("ul",[o("li",[o("strong",[e._v("A")]),e._v(". Be very clear about the requested change, stating the issue unambiguously or suggesting a code edit.")]),e._v(" "),o("li",[o("strong",[e._v("B")]),e._v(". If the request is ambiguous, doesn't provide enough details or is a\npersonal opinion without strong arguments; state that the request is not\nblocking and let the author of the PR decide wether to make a change or not\nat their own discretion.")])])])]),e._v(" "),o("h4",{attrs:{id:"automated-code-review"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#automated-code-review"}},[e._v("#")]),e._v(" Automated Code Review")]),e._v(" "),o("ul",[o("li",[e._v("PRs can be merged once:\n"),o("ul",[o("li",[e._v("the tests pass")]),e._v(" "),o("li",[e._v("the linters pass (if activated)")])])]),e._v(" "),o("li",[e._v("It's the responsability of the repo creator/owner to configure the Github Actions with the automated Tests & Linters for each commit & PR")])]),e._v(" "),o("h2",{attrs:{id:"linters"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#linters"}},[e._v("#")]),e._v(" Linters")]),e._v(" "),o("p",[e._v("There will be an 'official' minimum linter configuration file, that all the repos of each language must include in the automated tests.")]),e._v(" "),o("h2",{attrs:{id:"git-branching-model"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#git-branching-model"}},[e._v("#")]),e._v(" Git branching model")]),e._v(" "),o("p",[e._v("Git repo guidelines can be found "),o("RouterLink",{attrs:{to:"/about-us/repository-branching.html"}},[e._v("here")])],1)])}),[],!1,null,null,null);t.default=s.exports}}]);